import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// browser-external:node:crypto
var require_node_crypto = __commonJS({
  "browser-external:node:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:crypto" has been externalized for browser compatibility. Cannot access "node:crypto.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../../../../node_modules/next/dist/trace/shared.js
var require_shared = __commonJS({
  "../../../../node_modules/next/dist/trace/shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      setGlobal: function() {
        return setGlobal;
      },
      traceGlobals: function() {
        return traceGlobals;
      },
      traceId: function() {
        return traceId;
      }
    });
    var _nodecrypto = require_node_crypto();
    var _traceGlobals = global._traceGlobals;
    if (!_traceGlobals) {
      _traceGlobals = /* @__PURE__ */ new Map();
    }
    global._traceGlobals = _traceGlobals;
    var traceGlobals = _traceGlobals;
    var setGlobal = (key, val) => {
      traceGlobals.set(key, val);
    };
    var traceId = process.env.TRACE_ID || process.env.NEXT_PRIVATE_TRACE_ID || (0, _nodecrypto.randomBytes)(8).toString("hex");
  }
});

// ../../../../node_modules/next/dist/trace/report/to-telemetry.js
var require_to_telemetry = __commonJS({
  "../../../../node_modules/next/dist/trace/report/to-telemetry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    var _shared = require_shared();
    var TRACE_EVENT_ACCESSLIST = new Map(Object.entries({
      "webpack-invalidated": "WEBPACK_INVALIDATED"
    }));
    var reportToTelemetry = ({ name, duration }) => {
      const eventName = TRACE_EVENT_ACCESSLIST.get(name);
      if (!eventName) {
        return;
      }
      const telemetry = _shared.traceGlobals.get("telemetry");
      if (!telemetry) {
        return;
      }
      telemetry.record({
        eventName,
        payload: {
          durationInMicroseconds: duration
        }
      });
    };
    var _default = {
      flushAll: () => {
      },
      report: reportToTelemetry
    };
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:path
var require_path = __commonJS({
  "browser-external:path"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "path" has been externalized for browser compatibility. Cannot access "path.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../../../../node_modules/@swc/helpers/cjs/_interop_require_default.cjs
var require_interop_require_default = __commonJS({
  "../../../../node_modules/@swc/helpers/cjs/_interop_require_default.cjs"(exports) {
    "use strict";
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports._ = _interop_require_default;
  }
});

// ../../../../node_modules/next/dist/shared/lib/modern-browserslist-target.js
var require_modern_browserslist_target = __commonJS({
  "../../../../node_modules/next/dist/shared/lib/modern-browserslist-target.js"(exports, module) {
    "use strict";
    var MODERN_BROWSERSLIST_TARGET = [
      "chrome 64",
      "edge 79",
      "firefox 67",
      "opera 51",
      "safari 12"
    ];
    module.exports = MODERN_BROWSERSLIST_TARGET;
  }
});

// ../../../../node_modules/next/dist/shared/lib/constants.js
var require_constants = __commonJS({
  "../../../../node_modules/next/dist/shared/lib/constants.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      APP_BUILD_MANIFEST: function() {
        return APP_BUILD_MANIFEST;
      },
      APP_CLIENT_INTERNALS: function() {
        return APP_CLIENT_INTERNALS;
      },
      APP_PATHS_MANIFEST: function() {
        return APP_PATHS_MANIFEST;
      },
      APP_PATH_ROUTES_MANIFEST: function() {
        return APP_PATH_ROUTES_MANIFEST;
      },
      BARREL_OPTIMIZATION_PREFIX: function() {
        return BARREL_OPTIMIZATION_PREFIX;
      },
      BLOCKED_PAGES: function() {
        return BLOCKED_PAGES;
      },
      BUILD_ID_FILE: function() {
        return BUILD_ID_FILE;
      },
      BUILD_MANIFEST: function() {
        return BUILD_MANIFEST;
      },
      CLIENT_PUBLIC_FILES_PATH: function() {
        return CLIENT_PUBLIC_FILES_PATH;
      },
      CLIENT_REFERENCE_MANIFEST: function() {
        return CLIENT_REFERENCE_MANIFEST;
      },
      CLIENT_STATIC_FILES_PATH: function() {
        return CLIENT_STATIC_FILES_PATH;
      },
      CLIENT_STATIC_FILES_RUNTIME_AMP: function() {
        return CLIENT_STATIC_FILES_RUNTIME_AMP;
      },
      CLIENT_STATIC_FILES_RUNTIME_MAIN: function() {
        return CLIENT_STATIC_FILES_RUNTIME_MAIN;
      },
      CLIENT_STATIC_FILES_RUNTIME_MAIN_APP: function() {
        return CLIENT_STATIC_FILES_RUNTIME_MAIN_APP;
      },
      CLIENT_STATIC_FILES_RUNTIME_POLYFILLS: function() {
        return CLIENT_STATIC_FILES_RUNTIME_POLYFILLS;
      },
      CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL: function() {
        return CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL;
      },
      CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH: function() {
        return CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH;
      },
      CLIENT_STATIC_FILES_RUNTIME_WEBPACK: function() {
        return CLIENT_STATIC_FILES_RUNTIME_WEBPACK;
      },
      COMPILER_INDEXES: function() {
        return COMPILER_INDEXES;
      },
      COMPILER_NAMES: function() {
        return COMPILER_NAMES;
      },
      CONFIG_FILES: function() {
        return CONFIG_FILES;
      },
      DEFAULT_RUNTIME_WEBPACK: function() {
        return DEFAULT_RUNTIME_WEBPACK;
      },
      DEFAULT_SANS_SERIF_FONT: function() {
        return DEFAULT_SANS_SERIF_FONT;
      },
      DEFAULT_SERIF_FONT: function() {
        return DEFAULT_SERIF_FONT;
      },
      DEV_CLIENT_MIDDLEWARE_MANIFEST: function() {
        return DEV_CLIENT_MIDDLEWARE_MANIFEST;
      },
      DEV_CLIENT_PAGES_MANIFEST: function() {
        return DEV_CLIENT_PAGES_MANIFEST;
      },
      DYNAMIC_CSS_MANIFEST: function() {
        return DYNAMIC_CSS_MANIFEST;
      },
      EDGE_RUNTIME_WEBPACK: function() {
        return EDGE_RUNTIME_WEBPACK;
      },
      EDGE_UNSUPPORTED_NODE_APIS: function() {
        return EDGE_UNSUPPORTED_NODE_APIS;
      },
      EXPORT_DETAIL: function() {
        return EXPORT_DETAIL;
      },
      EXPORT_MARKER: function() {
        return EXPORT_MARKER;
      },
      FUNCTIONS_CONFIG_MANIFEST: function() {
        return FUNCTIONS_CONFIG_MANIFEST;
      },
      IMAGES_MANIFEST: function() {
        return IMAGES_MANIFEST;
      },
      INTERCEPTION_ROUTE_REWRITE_MANIFEST: function() {
        return INTERCEPTION_ROUTE_REWRITE_MANIFEST;
      },
      MIDDLEWARE_BUILD_MANIFEST: function() {
        return MIDDLEWARE_BUILD_MANIFEST;
      },
      MIDDLEWARE_MANIFEST: function() {
        return MIDDLEWARE_MANIFEST;
      },
      MIDDLEWARE_REACT_LOADABLE_MANIFEST: function() {
        return MIDDLEWARE_REACT_LOADABLE_MANIFEST;
      },
      MODERN_BROWSERSLIST_TARGET: function() {
        return _modernbrowserslisttarget.default;
      },
      NEXT_BUILTIN_DOCUMENT: function() {
        return NEXT_BUILTIN_DOCUMENT;
      },
      NEXT_FONT_MANIFEST: function() {
        return NEXT_FONT_MANIFEST;
      },
      PAGES_MANIFEST: function() {
        return PAGES_MANIFEST;
      },
      PHASE_DEVELOPMENT_SERVER: function() {
        return PHASE_DEVELOPMENT_SERVER;
      },
      PHASE_EXPORT: function() {
        return PHASE_EXPORT;
      },
      PHASE_INFO: function() {
        return PHASE_INFO;
      },
      PHASE_PRODUCTION_BUILD: function() {
        return PHASE_PRODUCTION_BUILD;
      },
      PHASE_PRODUCTION_SERVER: function() {
        return PHASE_PRODUCTION_SERVER;
      },
      PHASE_TEST: function() {
        return PHASE_TEST;
      },
      PRERENDER_MANIFEST: function() {
        return PRERENDER_MANIFEST;
      },
      REACT_LOADABLE_MANIFEST: function() {
        return REACT_LOADABLE_MANIFEST;
      },
      ROUTES_MANIFEST: function() {
        return ROUTES_MANIFEST;
      },
      RSC_MODULE_TYPES: function() {
        return RSC_MODULE_TYPES;
      },
      SERVER_DIRECTORY: function() {
        return SERVER_DIRECTORY;
      },
      SERVER_FILES_MANIFEST: function() {
        return SERVER_FILES_MANIFEST;
      },
      SERVER_PROPS_ID: function() {
        return SERVER_PROPS_ID;
      },
      SERVER_REFERENCE_MANIFEST: function() {
        return SERVER_REFERENCE_MANIFEST;
      },
      STATIC_PROPS_ID: function() {
        return STATIC_PROPS_ID;
      },
      STATIC_STATUS_PAGES: function() {
        return STATIC_STATUS_PAGES;
      },
      STRING_LITERAL_DROP_BUNDLE: function() {
        return STRING_LITERAL_DROP_BUNDLE;
      },
      SUBRESOURCE_INTEGRITY_MANIFEST: function() {
        return SUBRESOURCE_INTEGRITY_MANIFEST;
      },
      SYSTEM_ENTRYPOINTS: function() {
        return SYSTEM_ENTRYPOINTS;
      },
      TRACE_OUTPUT_VERSION: function() {
        return TRACE_OUTPUT_VERSION;
      },
      TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST: function() {
        return TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST;
      },
      TURBO_TRACE_DEFAULT_MEMORY_LIMIT: function() {
        return TURBO_TRACE_DEFAULT_MEMORY_LIMIT;
      },
      UNDERSCORE_NOT_FOUND_ROUTE: function() {
        return UNDERSCORE_NOT_FOUND_ROUTE;
      },
      UNDERSCORE_NOT_FOUND_ROUTE_ENTRY: function() {
        return UNDERSCORE_NOT_FOUND_ROUTE_ENTRY;
      },
      WEBPACK_STATS: function() {
        return WEBPACK_STATS;
      }
    });
    var _interop_require_default = require_interop_require_default();
    var _modernbrowserslisttarget = _interop_require_default._(require_modern_browserslist_target());
    var COMPILER_NAMES = {
      client: "client",
      server: "server",
      edgeServer: "edge-server"
    };
    var COMPILER_INDEXES = {
      [COMPILER_NAMES.client]: 0,
      [COMPILER_NAMES.server]: 1,
      [COMPILER_NAMES.edgeServer]: 2
    };
    var UNDERSCORE_NOT_FOUND_ROUTE = "/_not-found";
    var UNDERSCORE_NOT_FOUND_ROUTE_ENTRY = "" + UNDERSCORE_NOT_FOUND_ROUTE + "/page";
    var PHASE_EXPORT = "phase-export";
    var PHASE_PRODUCTION_BUILD = "phase-production-build";
    var PHASE_PRODUCTION_SERVER = "phase-production-server";
    var PHASE_DEVELOPMENT_SERVER = "phase-development-server";
    var PHASE_TEST = "phase-test";
    var PHASE_INFO = "phase-info";
    var PAGES_MANIFEST = "pages-manifest.json";
    var WEBPACK_STATS = "webpack-stats.json";
    var APP_PATHS_MANIFEST = "app-paths-manifest.json";
    var APP_PATH_ROUTES_MANIFEST = "app-path-routes-manifest.json";
    var BUILD_MANIFEST = "build-manifest.json";
    var APP_BUILD_MANIFEST = "app-build-manifest.json";
    var FUNCTIONS_CONFIG_MANIFEST = "functions-config-manifest.json";
    var SUBRESOURCE_INTEGRITY_MANIFEST = "subresource-integrity-manifest";
    var NEXT_FONT_MANIFEST = "next-font-manifest";
    var EXPORT_MARKER = "export-marker.json";
    var EXPORT_DETAIL = "export-detail.json";
    var PRERENDER_MANIFEST = "prerender-manifest.json";
    var ROUTES_MANIFEST = "routes-manifest.json";
    var IMAGES_MANIFEST = "images-manifest.json";
    var SERVER_FILES_MANIFEST = "required-server-files.json";
    var DEV_CLIENT_PAGES_MANIFEST = "_devPagesManifest.json";
    var MIDDLEWARE_MANIFEST = "middleware-manifest.json";
    var TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST = "_clientMiddlewareManifest.json";
    var DEV_CLIENT_MIDDLEWARE_MANIFEST = "_devMiddlewareManifest.json";
    var REACT_LOADABLE_MANIFEST = "react-loadable-manifest.json";
    var SERVER_DIRECTORY = "server";
    var CONFIG_FILES = [
      "next.config.js",
      "next.config.mjs",
      "next.config.ts"
    ];
    var BUILD_ID_FILE = "BUILD_ID";
    var BLOCKED_PAGES = [
      "/_document",
      "/_app",
      "/_error"
    ];
    var CLIENT_PUBLIC_FILES_PATH = "public";
    var CLIENT_STATIC_FILES_PATH = "static";
    var STRING_LITERAL_DROP_BUNDLE = "__NEXT_DROP_CLIENT_FILE__";
    var NEXT_BUILTIN_DOCUMENT = "__NEXT_BUILTIN_DOCUMENT__";
    var BARREL_OPTIMIZATION_PREFIX = "__barrel_optimize__";
    var CLIENT_REFERENCE_MANIFEST = "client-reference-manifest";
    var SERVER_REFERENCE_MANIFEST = "server-reference-manifest";
    var MIDDLEWARE_BUILD_MANIFEST = "middleware-build-manifest";
    var MIDDLEWARE_REACT_LOADABLE_MANIFEST = "middleware-react-loadable-manifest";
    var INTERCEPTION_ROUTE_REWRITE_MANIFEST = "interception-route-rewrite-manifest";
    var DYNAMIC_CSS_MANIFEST = "dynamic-css-manifest";
    var CLIENT_STATIC_FILES_RUNTIME_MAIN = "main";
    var CLIENT_STATIC_FILES_RUNTIME_MAIN_APP = "" + CLIENT_STATIC_FILES_RUNTIME_MAIN + "-app";
    var APP_CLIENT_INTERNALS = "app-pages-internals";
    var CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH = "react-refresh";
    var CLIENT_STATIC_FILES_RUNTIME_AMP = "amp";
    var CLIENT_STATIC_FILES_RUNTIME_WEBPACK = "webpack";
    var CLIENT_STATIC_FILES_RUNTIME_POLYFILLS = "polyfills";
    var CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL = Symbol(CLIENT_STATIC_FILES_RUNTIME_POLYFILLS);
    var DEFAULT_RUNTIME_WEBPACK = "webpack-runtime";
    var EDGE_RUNTIME_WEBPACK = "edge-runtime-webpack";
    var STATIC_PROPS_ID = "__N_SSG";
    var SERVER_PROPS_ID = "__N_SSP";
    var DEFAULT_SERIF_FONT = {
      name: "Times New Roman",
      xAvgCharWidth: 821,
      azAvgWidth: 854.3953488372093,
      unitsPerEm: 2048
    };
    var DEFAULT_SANS_SERIF_FONT = {
      name: "Arial",
      xAvgCharWidth: 904,
      azAvgWidth: 934.5116279069767,
      unitsPerEm: 2048
    };
    var STATIC_STATUS_PAGES = [
      "/500"
    ];
    var TRACE_OUTPUT_VERSION = 1;
    var TURBO_TRACE_DEFAULT_MEMORY_LIMIT = 6e3;
    var RSC_MODULE_TYPES = {
      client: "client",
      server: "server"
    };
    var EDGE_UNSUPPORTED_NODE_APIS = [
      "clearImmediate",
      "setImmediate",
      "BroadcastChannel",
      "ByteLengthQueuingStrategy",
      "CompressionStream",
      "CountQueuingStrategy",
      "DecompressionStream",
      "DomException",
      "MessageChannel",
      "MessageEvent",
      "MessagePort",
      "ReadableByteStreamController",
      "ReadableStreamBYOBRequest",
      "ReadableStreamDefaultController",
      "TransformStreamDefaultController",
      "WritableStreamDefaultController"
    ];
    var SYSTEM_ENTRYPOINTS = /* @__PURE__ */ new Set([
      CLIENT_STATIC_FILES_RUNTIME_MAIN,
      CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH,
      CLIENT_STATIC_FILES_RUNTIME_AMP,
      CLIENT_STATIC_FILES_RUNTIME_MAIN_APP
    ]);
    if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
      Object.defineProperty(exports.default, "__esModule", { value: true });
      Object.assign(exports.default, exports);
      module.exports = exports.default;
    }
  }
});

// ../../../../node_modules/next/dist/trace/report/to-json.js
var require_to_json = __commonJS({
  "../../../../node_modules/next/dist/trace/report/to-json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      batcher: function() {
        return batcher;
      },
      default: function() {
        return _default;
      }
    });
    var _shared = require_shared();
    var _fs = _interop_require_default(require_fs());
    var _path = _interop_require_default(require_path());
    var _constants = require_constants();
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function batcher(reportEvents) {
      const events = [];
      const queue = /* @__PURE__ */ new Set();
      return {
        flushAll: async () => {
          await Promise.all(queue);
          if (events.length > 0) {
            await reportEvents(events);
            events.length = 0;
          }
        },
        report: (event) => {
          events.push(event);
          if (events.length > 100) {
            const evts = events.slice();
            events.length = 0;
            const report = reportEvents(evts);
            queue.add(report);
            report.then(() => queue.delete(report));
          }
        }
      };
    }
    var writeStream;
    var batch;
    var writeStreamOptions = {
      flags: "a",
      encoding: "utf8"
    };
    var RotatingWriteStream = class {
      constructor(file, sizeLimit) {
        this.file = file;
        this.size = 0;
        this.sizeLimit = sizeLimit;
        this.createWriteStream();
      }
      createWriteStream() {
        this.writeStream = _fs.default.createWriteStream(this.file, writeStreamOptions);
      }
      // Recreate the file
      async rotate() {
        await this.end();
        try {
          _fs.default.unlinkSync(this.file);
        } catch (err) {
          if (err.code !== "ENOENT") {
            throw err;
          }
        }
        this.size = 0;
        this.createWriteStream();
        this.rotatePromise = void 0;
      }
      async write(data) {
        if (this.rotatePromise) await this.rotatePromise;
        this.size += data.length;
        if (this.size > this.sizeLimit) {
          await (this.rotatePromise = this.rotate());
        }
        if (!this.writeStream.write(data, "utf8")) {
          if (this.drainPromise === void 0) {
            this.drainPromise = new Promise((resolve, _reject) => {
              this.writeStream.once("drain", () => {
                this.drainPromise = void 0;
                resolve();
              });
            });
          }
          await this.drainPromise;
        }
      }
      end() {
        return new Promise((resolve) => {
          this.writeStream.end(resolve);
        });
      }
    };
    var reportToLocalHost = (event) => {
      const distDir = _shared.traceGlobals.get("distDir");
      const phase = _shared.traceGlobals.get("phase");
      if (!distDir || !phase) {
        return;
      }
      if (!batch) {
        batch = batcher(async (events) => {
          if (!writeStream) {
            await _fs.default.promises.mkdir(distDir, {
              recursive: true
            });
            const file = _path.default.join(distDir, "trace");
            writeStream = new RotatingWriteStream(
              file,
              // Development is limited to 50MB, production is unlimited
              phase === _constants.PHASE_DEVELOPMENT_SERVER ? 52428800 : Infinity
            );
          }
          const eventsJson = JSON.stringify(events);
          try {
            await writeStream.write(eventsJson + "\n");
          } catch (err) {
            console.log(err);
          }
        });
      }
      batch.report({
        ...event,
        traceId: _shared.traceId
      });
    };
    var _default = {
      flushAll: (opts) => batch ? batch.flushAll().then(() => {
        const phase = _shared.traceGlobals.get("phase");
        if ((opts == null ? void 0 : opts.end) || phase !== _constants.PHASE_DEVELOPMENT_SERVER) {
          return writeStream.end();
        }
      }) : void 0,
      report: reportToLocalHost
    };
  }
});

// ../../../../node_modules/next/dist/trace/report/index.js
var require_report = __commonJS({
  "../../../../node_modules/next/dist/trace/report/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "reporter", {
      enumerable: true,
      get: function() {
        return reporter;
      }
    });
    var _totelemetry = _interop_require_default(require_to_telemetry());
    var _tojson = _interop_require_default(require_to_json());
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var MultiReporter = class {
      constructor(reporters) {
        this.reporters = [];
        this.reporters = reporters;
      }
      async flushAll(opts) {
        await Promise.all(this.reporters.map((reporter2) => reporter2.flushAll(opts)));
      }
      report(event) {
        this.reporters.forEach((reporter2) => reporter2.report(event));
      }
    };
    var reporter = new MultiReporter([
      _tojson.default,
      _totelemetry.default
    ]);
  }
});

// ../../../../node_modules/next/dist/trace/trace.js
var require_trace = __commonJS({
  "../../../../node_modules/next/dist/trace/trace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      Span: function() {
        return Span;
      },
      SpanStatus: function() {
        return SpanStatus;
      },
      clearTraceEvents: function() {
        return clearTraceEvents;
      },
      exportTraceState: function() {
        return exportTraceState;
      },
      flushAllTraces: function() {
        return flushAllTraces;
      },
      getTraceEvents: function() {
        return getTraceEvents;
      },
      initializeTraceState: function() {
        return initializeTraceState;
      },
      recordTraceEvents: function() {
        return recordTraceEvents;
      },
      trace: function() {
        return trace;
      }
    });
    var _report = require_report();
    var NUM_OF_MICROSEC_IN_NANOSEC = BigInt("1000");
    var NUM_OF_MILLISEC_IN_NANOSEC = BigInt("1000000");
    var count = 0;
    var getId = () => {
      count++;
      return count;
    };
    var defaultParentSpanId;
    var shouldSaveTraceEvents;
    var savedTraceEvents = [];
    var RECORD_SPAN_THRESHOLD_MS = parseInt(process.env.NEXT_TRACE_SPAN_THRESHOLD_MS ?? "-1");
    var SpanStatus = function(SpanStatus2) {
      SpanStatus2["Started"] = "started";
      SpanStatus2["Stopped"] = "stopped";
      return SpanStatus2;
    }({});
    var Span = class _Span {
      constructor({ name, parentId, attrs, startTime }) {
        this.name = name;
        this.parentId = parentId ?? defaultParentSpanId;
        this.attrs = attrs ? {
          ...attrs
        } : {};
        this.status = "started";
        this.id = getId();
        this._start = startTime || process.hrtime.bigint();
        this.now = Date.now();
      }
      // Durations are reported as microseconds. This gives 1000x the precision
      // of something like Date.now(), which reports in milliseconds.
      // Additionally, ~285 years can be safely represented as microseconds as
      // a float64 in both JSON and JavaScript.
      stop(stopTime) {
        if (this.status === "stopped") {
          return;
        }
        const end = stopTime || process.hrtime.bigint();
        const duration = (end - this._start) / NUM_OF_MICROSEC_IN_NANOSEC;
        this.status = "stopped";
        if (duration > Number.MAX_SAFE_INTEGER) {
          throw new Error(`Duration is too long to express as float64: ${duration}`);
        }
        const timestamp = this._start / NUM_OF_MICROSEC_IN_NANOSEC;
        const traceEvent = {
          name: this.name,
          duration: Number(duration),
          timestamp: Number(timestamp),
          id: this.id,
          parentId: this.parentId,
          tags: this.attrs,
          startTime: this.now
        };
        if (duration > RECORD_SPAN_THRESHOLD_MS * 1e3) {
          _report.reporter.report(traceEvent);
          if (shouldSaveTraceEvents) {
            savedTraceEvents.push(traceEvent);
          }
        }
      }
      traceChild(name, attrs) {
        return new _Span({
          name,
          parentId: this.id,
          attrs
        });
      }
      manualTraceChild(name, startTime, stopTime, attrs) {
        const correction = process.hrtime.bigint() - BigInt(Date.now()) * NUM_OF_MILLISEC_IN_NANOSEC;
        const span = new _Span({
          name,
          parentId: this.id,
          attrs,
          startTime: startTime ? startTime + correction : process.hrtime.bigint()
        });
        span.stop(stopTime ? stopTime + correction : process.hrtime.bigint());
      }
      getId() {
        return this.id;
      }
      setAttribute(key, value) {
        this.attrs[key] = value;
      }
      traceFn(fn) {
        try {
          return fn(this);
        } finally {
          this.stop();
        }
      }
      async traceAsyncFn(fn) {
        try {
          return await fn(this);
        } finally {
          this.stop();
        }
      }
    };
    var trace = (name, parentId, attrs) => {
      return new Span({
        name,
        parentId,
        attrs
      });
    };
    var flushAllTraces = (opts) => _report.reporter.flushAll(opts);
    var exportTraceState = () => ({
      defaultParentSpanId,
      lastId: count,
      shouldSaveTraceEvents
    });
    var initializeTraceState = (state) => {
      count = state.lastId;
      defaultParentSpanId = state.defaultParentSpanId;
      shouldSaveTraceEvents = state.shouldSaveTraceEvents;
    };
    function getTraceEvents() {
      return savedTraceEvents;
    }
    function recordTraceEvents(events) {
      for (const traceEvent of events) {
        _report.reporter.report(traceEvent);
        if (traceEvent.id > count) {
          count = traceEvent.id + 1;
        }
      }
      if (shouldSaveTraceEvents) {
        savedTraceEvents.push(...events);
      }
    }
    var clearTraceEvents = () => savedTraceEvents = [];
  }
});

// ../../../../node_modules/next/dist/trace/index.js
var require_trace2 = __commonJS({
  "../../../../node_modules/next/dist/trace/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      Span: function() {
        return _trace.Span;
      },
      SpanStatus: function() {
        return _trace.SpanStatus;
      },
      exportTraceState: function() {
        return _trace.exportTraceState;
      },
      flushAllTraces: function() {
        return _trace.flushAllTraces;
      },
      getTraceEvents: function() {
        return _trace.getTraceEvents;
      },
      initializeTraceState: function() {
        return _trace.initializeTraceState;
      },
      recordTraceEvents: function() {
        return _trace.recordTraceEvents;
      },
      setGlobal: function() {
        return _shared.setGlobal;
      },
      trace: function() {
        return _trace.trace;
      }
    });
    var _trace = require_trace();
    var _shared = require_shared();
  }
});
export default require_trace2();
//# sourceMappingURL=next_dist_trace.js.map
